i) Usage of clone() method -Shallow Copy
Note – In the below code example the clone() method does create a completely new object with a different hashCode value, which means its in a separate memory location. But due to the Test object c being inside Test2, the primitive types have achieved deep copy but this Test object c is still shared between t1 and t2. To overcome that we explicitly do a deep copy for object variable c, which is discussed later. 

Java

// A Java program to demonstrate 
// shallow copy using clone() 
import java.util.ArrayList; 
  
// An object reference of this class is 
// contained by Test2 
class Test { 
    int x, y; 
} 
  
// Contains a reference of Test and 
// implements clone with shallow copy. 
class Test2 implements Cloneable { 
    int a; 
    int b; 
    Test c = new Test(); 
    public Object clone() throws CloneNotSupportedException 
    { 
        return super.clone(); 
    } 
} 
  
// Driver class 
public class Main { 
    public static void main(String args[]) 
        throws CloneNotSupportedException 
    { 
        Test2 t1 = new Test2(); 
        t1.a = 10; 
        t1.b = 20; 
        t1.c.x = 30; 
        t1.c.y = 40; 
  
        Test2 t2 = (Test2)t1.clone(); 
  
        // Creating a copy of object t1 
        // and passing it to t2 
        t2.a = 100; 
  
        // Change in primitive type of t2 will 
        // not be reflected in t1 field 
        t2.c.x = 300; 
  
        // Change in object type field will be 
        // reflected in both t2 and t1(shallow copy) 
        System.out.println(t1.a + " " + t1.b + " " + t1.c.x 
                           + " " + t1.c.y); 
        System.out.println(t2.a + " " + t2.b + " " + t2.c.x 
                           + " " + t2.c.y); 
    } 
}
Output
10 20 300 40
100 20 300 40
In the above example, t1.clone returns the shallow copy of the object t1. To obtain a deep copy of the object certain modifications have to be made in the clone method after obtaining the copy.

ii) Usage of clone() method – Deep Copy 
If we want to create a deep copy of object X and place it in a new object Y then a new copy of any referenced objects fields are created and these references are placed in object Y. This means any changes made in referenced object fields in object X or Y will be reflected only in that object and not in the other. In the below example, we create a deep copy of the object.
A deep copy copies all fields and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.
Java

// A Java program to demonstrate 
// deep copy using clone() 
  
// An object reference of this 
// class is contained by Test2 
class Test { 
    int x, y; 
} 
  
// Contains a reference of Test and 
// implements clone with deep copy. 
class Test2 implements Cloneable { 
    int a, b; 
  
    Test c = new Test(); 
  
    public Object clone() throws CloneNotSupportedException 
    { 
        // Assign the shallow copy to 
        // new reference variable t 
        Test2 t = (Test2)super.clone(); 
  
        // Creating a deep copy for c 
        t.c = new Test(); 
        t.c.x = c.x; 
        t.c.y = c.y; 
  
        // Create a new object for the field c 
        // and assign it to shallow copy obtained, 
        // to make it a deep copy 
        return t; 
    } 
} 
  
public class Main { 
    public static void main(String args[]) 
        throws CloneNotSupportedException 
    { 
        Test2 t1 = new Test2(); 
        t1.a = 10; 
        t1.b = 20; 
        t1.c.x = 30; 
        t1.c.y = 40; 
  
        Test2 t3 = (Test2)t1.clone(); 
        t3.a = 100; 
  
        // Change in primitive type of t2 will 
        // not be reflected in t1 field 
        t3.c.x = 300; 
  
        // Change in object type field of t2 will 
        // not be reflected in t1(deep copy) 
        System.out.println(t1.a + " " + t1.b + " " + t1.c.x 
                           + " " + t1.c.y); 
        System.out.println(t3.a + " " + t3.b + " " + t3.c.x 
                           + " " + t3.c.y); 
    } 
}
Output
10 20 30 40
100 20 300 40
In the above example, we can see that a new object for the Test class has been assigned to copy an object that will be returned to the clone method. Due to this t3 will obtain a deep copy of the object t1. So any changes made in the ‘c’ object fields by t3, will not be reflected in t1.